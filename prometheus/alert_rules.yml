groups:
  - name: spring-boot-alerts
    rules:
      - alert: HighErrorRate
        expr: rate(http_server_requests_seconds_count{status=~"5.."}[5m]) / rate(http_server_requests_seconds_count[5m]) > 0.05
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "High error rate detected"
          description: "Error rate is above 5% for the last 5 minutes - current value: {{ $value }}"

      - alert: HighResponseTime
        expr: rate(http_server_requests_seconds_sum[5m]) / rate(http_server_requests_seconds_count[5m]) > 2
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High response time detected"
          description: "Average response time exceeded 2 seconds - current value: {{ $value }}"

      - alert: HighMemoryUsage
        expr: jvm_memory_used_bytes{area="heap"} / jvm_memory_max_bytes{area="heap"} > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage"
          description: "JVM heap memory usage is above 80% - current value: {{ $value }}"

      - alert: ServiceDown
        expr: up{job="spring-boot-app"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Service is down"
          description: "Spring Boot application is not responding"

      - alert: HighRequestRate
        expr: rate(http_server_requests_seconds_count[20s]) > 1000
        for: 0s  # Fire immediately when condition is met
        labels:
          severity: critical
          team: backend
          category: performance
        annotations:
          summary: "Extremely high request rate detected"
          description: "Application received more than 100 requests in 1 seconds (current value: {{ $value }} requests/sec)"
          impact: "Potential service degradation or outage"
          action: "Investigate traffic source and consider scaling or rate limiting"

